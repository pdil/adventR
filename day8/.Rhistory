df <- as.dataframe(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
head(df)
df <- as.dataframe(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df[[i,1]] <- i
df[[i,2]] <- object.size(q)
}
head(df)
df <- as.dataframe(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df$n[i] <- i
df$size[i] <- object.size(q)
}
head(df)
df <- data.frame(n=numeric(0), size=numeric(0))
for(i in 1:1000) {
q <- 1:i
df <- rbind(df, data.frame(n=i, size=object.size(q)))
}
head(df)
df <- data.frame(n=numeric(0), size=numeric(0))
for(i in 1:1000) {
q <- 1:i
df <- rbind(df, data.frame(n=i, size=object.size(q)))
}
df
df <- data.frame(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
df
df <- data.frame(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
library(ggplot2)
p <- ggplot(data=df, aes(x=i, y=size)) + geom_point()
print(p)
df <- data.frame(n=numeric(1000), size=numeric(1000))
for(i in 1:1000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
library(ggplot2)
p <- ggplot(data=df, aes(x=n, y=size)) + geom_point()
print(p)
df <- data.frame(n=numeric(10000), size=numeric(10000))
for(i in 1:10000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
library(ggplot2)
p <- ggplot(data=df, aes(x=n, y=size)) + geom_point()
print(p)
df <- data.frame(n=numeric(10000), size=numeric(10000))
for(i in 1:10000) {
q <- 1:i
df[i,1] <- i
df[i,2] <- object.size(q)
}
library(ggplot2)
p <- ggplot(data=df, aes(x=n, y=size)) + geom_point() + xlab("Number of list elements") + ylab("Size of list (bytes)")
print(p)
install.packages(tikzDevice)
install.packages("tikzDevice")
v <- factor(c("2", "3", "5", "7", "11"))
str(v)
library(lubridate)
?strsplit
?matrix
unlist(mess.data)
?vapply
?regex
?gsub
install.packages("ISLR")
library(ISLR)
data(College)
str(College)
fix(College)
view(College)
View(College)
rownames(College) = College[, 1]
summary(College)
pairs(College[, 1:10])
pairs
?pairs
pairs(College[, 1:10])
attach(College)
plot(Outstate, Private)
plot(Private, Outstate)
plot(College$Private, College$Outstate)
Elite <- rep("No", nrow(College))
Elite[which(College$Top10perc > 50)] <- "Yes"
Elite <- as.factor(Elite)
College <- data.frame(College, Elite)
summary(College)
plot(College$Elite, College$Outstate)
par(mfrow=c(2, 2))
hist(College$Room.Board, bins=10)
par(mfrow=c(2, 2))
par(mfrow=c(2, 2))
hist(College$Room.Board, binwidth=10)
par(mfrow=c(2, 2))
par(mfrow=c(2, 2))
hist(College$Room.Board, breaks=10)
hist(College$Books, breaks=10)
hist(College$Room.Board, breaks=10)
hist(College$Books, breaks=100)
par(mfrow=c(2, 2))
hist(College$Room.Board, breaks=10)
hist(College$Books, breaks=20)
hist(College$Grad.Rate, breaks=20)
hist(College$Phd, breaks=20)
hist(College$Top10perc, breaks=20)
data(Auto)
str(Auto)
range(Auto)
range(Auto[, 1:8])
range(Auto$year, Auto$origin)
range(Auto$mpg)
lapply(Auto[, 1:8], range)
sapply(Auto[, 1:8], range)
sapply(Auto[, 1:8], mean)
sapply(Auto[, 1:8], sd)
newAuto <- Auto[-10:85, 1:8]
newAuto <- Auto[-c(10:85), 1:8]
sapply(newAuto, mean)
sapply(Auto, range)
sapply(Auto, mean)
newAuto <- Auto[-c(10:85), ]
sapply(newAuto[, 1:8], mean)
sapply(newAuto[, 1:8], sd)
sapply(Auto[, 1:8], mean)
sapply(Auto[, 1:8], sd)
sapply(newAuto[, 1:8], mean)
sapply(newAuto[, 1:8], sd)
sapply(newAuto[, 1:8], range)
sapply(Auto[, 1:8], range)
plot(Auto$cylinders, Auto$displacement)
?par
par(new=TRUE)
plot(Auto$cylinders, Auto$displacement)
par
par()
par(mfrow=c(1, 1))
plot(Auto$cylinders, Auto$displacement)
plot(Auto$weight, Auto$mpg)
plot(Auto$year, Auto$horsepower)
par(mforw=c(2, 2))
par(mfrow=c(2, 2))
plot(Auto$cylinders, Auto$mpg)
plot(Auto$weight, Auto$mpg)
plot(Auto$year, Auto$mpg)
plot(Auto$displacement, Auto$mpg)
ar(mfrow=c(2, 3))
plot(Auto$cylinders, Auto$mpg)
plot(Auto$weight, Auto$mpg)
plot(Auto$year, Auto$mpg)
plot(Auto$displacement, Auto$mpg)
plot(Auto$acceleration, Auto$mpg)
plot(Auto$horsepower, Auto$mpg)
par(mfrow=c(2, 3))
plot(Auto$cylinders, Auto$mpg)
plot(Auto$weight, Auto$mpg)
plot(Auto$year, Auto$mpg)
plot(Auto$displacement, Auto$mpg)
plot(Auto$acceleration, Auto$mpg)
plot(Auto$horsepower, Auto$mpg)
plot(Auto$cylinders, Auto$displacement)
data(Boston)
library(MASS)
data(Boston)
?Boston
pairs(Boston)
pairs(Boston[, 1:5])
?Boston
sapply(Boston[, c("crim", "tax", "ptratio")], range)
length(which(Boston$chas == 1))
median(Boston$ptratio)
str(Boston)
Boston[which(Boston$medv == min(Boston$medv)), ]
length(which(Boston$rm > 7))
length(which(Boston$rm > 8))
Boston[which(Boston$rm > 8), ]
install.packages(c("rJava", "Rcpp", "RJSONIO", "bitops", "digest",
"functional", "stringr", "plyr", "reshape2", "dplyr",
"R.methodsS3", "caTools", "Hmisc"))
library(choroplethr)
example("choroplethr")
example("admin1_choropleth")
?admin1_choropleth
data(df_japan_census)
head(df_japan_census)
# set the value we want to map to be the 2010 population estimates
df_japan_census$value=df_japan_census$pop_2010
# default map of all of japan
admin1_choropleth("japan",
df_japan_census,
"2010 Japan Population Estimates",
"Population")
# zoom in on the Kansai region and use a continuous scale
kansai = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga")
admin1_choropleth("japan",
df_japan_census,
"2010 Japan Population Estimates",
"Population",
1,
kansai)
install.packages("choroplethrAdmin1")
data(df_japan_census)
head(df_japan_census)
# set the value we want to map to be the 2010 population estimates
df_japan_census$value=df_japan_census$pop_2010
# default map of all of japan
admin1_choropleth("japan",
df_japan_census,
"2010 Japan Population Estimates",
"Population")
# zoom in on the Kansai region and use a continuous scale
kansai = c("mie", "nara", "wakayama", "kyoto", "osaka", "hyogo", "shiga")
admin1_choropleth("japan",
df_japan_census,
"2010 Japan Population Estimates",
"Population",
1,
kansai)
?choropleth
?choroplethr
x <- runif(7, 0, 15)
x
x <- as.integer(runif(7, 0, 15))
x
barplot(x)
x <- as.integer(runif(70, 0, 15))
x
barplot(x)
x <- rnorm(100, 3, 2)
barplot(x)
hist(x)
plot(density(x))
plot(density(x), col = "red")
plot(density(x), col = "red", fill = "blue")
boxplot(x)
vioplot(x)
vioplot::vioplot(x)
library(vioplot)
vioplot(x)
library(vioplot, xmax = 10)
library(vioplot, xlim = c(0, 10))
install.packages("noncensus")
install.packages("zipcode")
library(dplyr)
library(zipcode)
data(zipcode)
View(zipcode)
zipcode %>% filter(city == "Newark", state == "NJ") %>% select(zip)
filter(zipcode, city == "Newark", state == "NJ")
select(filter(zipcode, city == "Newark", state == "NJ"), "zip")
select(filter(zipcode, city == "Newark", state == "NJ"), zip)
zipcode %>% filter(city == "West Caldwell", state == "NJ") %>% select(zip)
zipcode %>% filter(city == "Caldwell", state == "NJ") %>% select(zip)
zipcode %>% filter(city == "Wharton", state == "NJ") %>% select(zip)
zipcode %>% filter(city == "West Palm Beach", state == "FL") %>% select(zip)
library(readr)
input <- read_file("http://adventofcode.com/day/1/input")
input
input <- read_file("http://adventofcode.com/day/1/input.txt")
input <- read_file("/Users/paolo/Desktop/input.txt")
input
input_edit <- gsub("(", "", input)
input_edit <- gsub("'('", "", input)
input_edit <- gsub("\(", "", input)
input_edit <- gsub("/(", "", input)
input_edit <- gsub('\(', "", input)
input_edit <- gsub("[(]", "", input)
num_up <- nchar(input) - nchar(input_edit)
num_down <- nchar(input) - num_up
num_up - num_down
df <- data.frame(
day = 1:8,
gold = c(15765, 11531, 9303, 8139, 6478, 5438, 3316, 2931)
)
glm_fit <- glm(gold ~ day, data = df, family = poisson(link = "log"))
glm_fit
coefs <- coef(glm_fit)
new_df <- data.frame(
day = 1:25,
gold = exp(coefs[[1]] + coefs[[2]] * (1:25))
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
library(ggplot2)
library(grid)
df <- data.frame(
day = 1:8,
gold = c(15765, 11531, 9303, 8139, 6478, 5438, 3316, 2931)
)
glm_fit <- glm(gold ~ day, data = df, family = poisson(link = "log"))
glm_fit
coefs <- coef(glm_fit)
new_df <- data.frame(
day = 1:25,
gold = exp(coefs[[1]] + coefs[[2]] * (1:25))
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
?poisson
library(MASS)
glm.nb(gold ~ day, data = df)
glm_fit
nb_fit <- glm.nb(gold ~ day, data = df)
predict(nb_fit, 1:25)
predict(nb_fit, new_df$day)
?predict
predict(nb_fit, new_df$day, type = "response")
summary(nb_fit)
coef(nb_fit)
coefs <- coef(nb_fit)
new_df <- data.frame(
day = 1:25,
gold = exp(coefs[[1]] + coefs[[2]] * (1:25))
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
df <- data.frame(
day = 1:8,
gold = c(15791, 11556, 9325, 8159, 6500, 5453, 3327, 2952)
)
glm_fit <- glm(gold ~ day, data = df, family = poisson(link = "log"))
glm_fit
coefs <- coef(nb_fit)
new_df <- data.frame(
day = 1:25,
gold = exp(coefs[[1]] + coefs[[2]] * (1:25))
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
mean(df$gold)
variance(df$gold)
sd(df$gold)^2
glm_fit
nb_fit
glm_fit <- glm.nb(gold ~ day, data = df)
glm_fit
coefs <- coef(glm_fit)
new_df <- data.frame(
day = 1:25,
gold = exp(coefs[[1]] + coefs[[2]] * (1:25))
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
predict(glm_fit, newdata = data.frame(day = 1:25), type = "response")
new_df <- data.frame(
day = 1:25,
gold = predict(glm_fit, newdata = data.frame(day = 1:25), type = "response")
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
glm(gold ~ day, data = df, family = poisson(link = "log - 1"))
new_df <- data.frame(
day = 1:25,
gold = predict(glm_fit, newdata = data.frame(day = 1:25), type = "response") + 100
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
new_df <- data.frame(
day = 1:25,
gold = predict(glm_fit, newdata = data.frame(day = 1:25), type = "response")
)
new_df$gold[25]
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
ggsave("glm.png", width = 8, height = 7)
ggsave("glm.png", width = 8, height = 7)
ggplot() +
geom_line(data = df, aes(x = day, y = gold)) +
geom_point(data = df, aes(x = day, y = gold)) +
geom_line(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_point(data = new_df, aes(x = day, y = gold), colour = "red") +
geom_segment(aes(x = 24.5, y = 3000, xend = 24.9, yend = new_df$gold[25] * 10), arrow = arrow(length = unit(0.5, "cm")),
colour = "black", size = 1) +
labs(x = "Day", y = "Number Completed", title = "Advent of Code Stats") +
annotate(geom = "text", x = 21.5, y = 3500, label = paste0("Day 25: ~", round(new_df$gold[25], 0)), hjust = 0) +
theme(panel.border = element_rect(fill = NA, colour = "black"))
ggsave("glm.png", width = 8, height = 7)
getwd()
setwd("~/Desktop/github/adventR")
ggsave("glm.png", width = 8, height = 7)
library(readr)
input <- read_lines("input.txt")
escape_len <- sum(nchar(input))
setwd("~/Desktop/github/adventR/day8")
input <- read_lines("input.txt")
escape_len <- sum(nchar(input))
input <- gsub("(\\\"|\\\\)", "00", x = input)
input <- gsub("(\\[x][0-9a-f][0-9a-f])")
input <- gsub("(\\\"|\\\\)", "00", x = input)
input <- gsub("(\\[x][0-9a-f][0-9a-f])", "000", x = input)
sum(nchar(input)) - escape_len + 2 * length(input)
input
input <- read_lines("input.txt")
escape_len <- sum(nchar(input))
input <- gsub("(\\[x][0-9a-f][0-9a-f])", "000", x = input)
input <- gsub("(\\\"|\\\\)", "00", x = input)
sum(nchar(input)) - escape_len + 2 * length(input)
input <- read_lines("input.txt")
input
"\\xe4"
write("\\xe4", file = "test.txt")
write("\xe4", file = "test.txt")
escape_len <- sum(nchar(input))
#input <- gsub("(\\[x][0-9a-f][0-9a-f])", "000", x = input)
input <- gsub("(\\\"|\\\\)", "00", x = input)
sum(nchar(input)) - escape_len + 2 * length(input)
input <- read_lines("input.txt")
escape_len <- sum(nchar(input))
#input <- gsub("(\\[x][0-9a-f][0-9a-f])", "000", x = input)
input <- gsub("(\\\"|\\\\)", "00", x = input)
sum(nchar(input)) - escape_len + 2 * length(input)
gsub("(\\[x][0-9a-f][0-9a-f])", "000", x = "\xe4")
gsub("([x][0-9a-f][0-9a-f])", "000", x = "\xe4")
gsub("\xe4", "000", x = "\xe4")
gsub("\x[0-9a-f][0-9a-f]", "000", x = "\xe4")
gsub("(\x[0-9a-f][0-9a-f])", "000", x = "\xe4")
gsub("(\\x[0-9a-f][0-9a-f])", "000", x = "\xe4")
?]\
"\x23"
"\x13"
