lapply(instructions, flip_switch)
length(which(lights == -1))
for (i in length(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instruction <- instructions[i, "instruction"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instruction == "toggle") {
lights[start_y:end_y, start_x:end_x] <- -lights[start_y:end_y, start_x:end_x]
} else if (instruction == "turn off") {
lights[start_y:end_y, start_x:end_x] <- -1
} else if (instruction == "turn on") {
lights[start_y:end_y, start_x:end_x] <- 1
}
}
head(instructions)
str(instructions)
View(instructions)
for (i in 1:length(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instruction <- instructions[i, "instruction"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instruction == "toggle") {
lights[start_y:end_y, start_x:end_x] <- -lights[start_y:end_y, start_x:end_x]
} else if (instruction == "turn off") {
lights[start_y:end_y, start_x:end_x] <- -1
} else if (instruction == "turn on") {
lights[start_y:end_y, start_x:end_x] <- 1
}
}
for (i in 1:length(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instruction <- instructions[i, "instr"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instruction == "toggle") {
lights[start_y:end_y, start_x:end_x] <- -lights[start_y:end_y, start_x:end_x]
} else if (instruction == "turn off") {
lights[start_y:end_y, start_x:end_x] <- -1
} else if (instruction == "turn on") {
lights[start_y:end_y, start_x:end_x] <- 1
}
}
length(which(lights == 1))
lights
length(which(lights == -1))
for (i in 1:length(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instr <- instructions[i, "instr"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instr == "toggle") {
lights[start_y:end_y, start_x:end_x] <- -lights[start_y:end_y, start_x:end_x]
} else if (instr == "turn off") {
lights[start_y:end_y, start_x:end_x] <- -1
} else if (instr == "turn on") {
lights[start_y:end_y, start_x:end_x] <- 1
}
}
length(which(lights == -1))
start_x
start_y
length(instructions)
?ncol
ncol(instructions)
nrow(instructions)
for (i in 1:nrow(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instr <- instructions[i, "instr"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instr == "toggle") {
lights[start_y:end_y, start_x:end_x] <- -lights[start_y:end_y, start_x:end_x]
} else if (instr == "turn off") {
lights[start_y:end_y, start_x:end_x] <- -1
} else if (instr == "turn on") {
lights[start_y:end_y, start_x:end_x] <- 1
}
}
length(which(lights == 1))
?ifelse
library(readr)
library(plyr)
input <- read_lines("input.txt")
lights <- matrix(rep(0, 1e6), ncol = 1000)
parse <- function(line) {
s <- unlist(strsplit(line, split = " "))
if (s[1] == "turn") {
instruction <- paste(s[1], s[2])
st <- s[3]
e <- s[5]
} else {
instruction <- "toggle"
st <- s[2]
e <- s[4]
}
data.frame(start = st, end = e, instr = instruction, stringsAsFactors = FALSE)
}
instructions <- ldply(input, parse)
for (i in 1:nrow(instructions)) {
start <- instructions[i, "start"]
end <- instructions[i, "end"]
instr <- instructions[i, "instr"]
start_x <- as.numeric(unlist(strsplit(start, split = ","))[1])
start_y <- as.numeric(unlist(strsplit(start, split = ","))[2])
end_x <- as.numeric(unlist(strsplit(end, split = ","))[1])
end_y <- as.numeric(unlist(strsplit(end, split = ","))[2])
if (instr == "toggle") {
lights[start_y:end_y, start_x:end_x] <- lights[start_y:end_y, start_x:end_x] + 2
} else if (instr == "turn on") {
lights[start_y:end_y, start_x:end_x] <- lights[start_y:end_y, start_x:end_x] + 1
} else if (instr == "turn off") {
lights[start_y:end_y, start_x:end_x] <- ifelse(lights[start_y:end_y, start_x:end_x] <= 0, 0, lights[start_y:end_y, start_x:end_x] - 1)
}
}
length(which(lights == 1))
lights
length(which(lights == 2))
length(which(lights == 3))
sum(lights)
str(data.frame(lights))
df_lights <- data.frame(lights)
ggplot() + geom_tile(aes(fill = lights))
library(ggplot2)
library(grid)
ggplot() + geom_tile(aes(fill = lights))
df_lights <- unlist(lights)
str(df_lights)
df_lights <- rapply(lights, c)
combinat:permn(1:10, 1:10)
install.packages("combinat")
library(combinat)
permn(1:10, 1:10)
permn(1:10)
library(tidyr)
install.packages("tidyr")
library(tidyr)
?gather
df_lights <- unlist(lights)
str(df_lights)
df_lights <- data.frame(lights) %>% gather(key = brightness, value = )
df_lights
df_lights <- data.frame(lights)
str(df_lights)
?im
?xtabs
row(lights)
as.vector(row(lights))
length(as.vector(m))
length(as.vector(lights))
length(as.vector(row(lights)))
length(which(as.vector(row(lights)) == 1))
df_lights <- data.frame(x = as.vector(row(lights)), y = as.vector(col(lights0)), brightness = as.vector(lights))
df_lights <- data.frame(x = as.vector(row(lights)), y = as.vector(col(lights)), brightness = as.vector(lights))
str(df_lights)
ggplot() + geom_tile(aes(x = x, y = y, fill = brightness))
ggplot(data = df_lights) + geom_tile(aes(x = x, y = y, fill = brightness))
summary(as.vector(lights))
ggplot(data = df_lights) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
ggplot(data = df_lights[1:50, 1:50]) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
ggplot(data = df_lights[1:50, 1:50]) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
ggplot(data = df_lights[1:50, ]) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
ggplot(data = df_lights[1:1e4, ]) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
ggplot(data = df_lights[1:2e4, ]) + geom_tile(aes(x = x, y = y, fill = brightness)) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank())
library(grid)
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm")))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(panel.background = element_rect(fill = "black", colour = NA),
plot.background = element_rect(fill = "black", colour = NA),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(panel.background = element_blank(),
plot.background = element_blank()
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(panel.background = element_blank(),
plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradient(values = "heat.colors") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradient(palette = heat.colors) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_brewer(palette = "heat.colors") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_brewer(palette = "YlOrRed") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_brewer(palette = "YlOrRd") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
str(df_lights)
df_lights <- data.frame(x = as.vector(row(lights)), y = as.vector(col(lights)), brightness = factor(as.vector(lights)))
str(df_lights)
ggplot(data = df_lights[1:2e4, ]) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_brewer(palette = "YlOrRd") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_brewer(palette = "YlOrRd") +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradient(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggsave("heatmap.png", height = 7, width = 7)
df_lights <- data.frame(x = as.vector(row(lights)), y = as.vector(col(lights)), brightness = as.vector(lights))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradient(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = heat.colors) + #(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = terrain.colors) + #(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = heat.colors(10)) + #(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
?heat.colors
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = cm.colors(5)) + #(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = heat.colors(5)) + #(low = "black", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradient(low = "yellow", high = "red", limits = c(0, 54)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
?scale_fill_gradient
colorFunc <- colorRampPalette(c("black", "red", "orange", "yellow", "white"), space = "rgb")
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = colorFunc(20)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness), show_guide = FALSE) +
scale_fill_gradientn(colours = colorFunc(10)) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness)) +
scale_fill_gradientn(colours = colorFunc(10), guide = FALSE) +
theme(panel.background = element_blank(), plot.background = element_blank(),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggsave("heatmap.png", height = 7, width = 7)
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness)) +
scale_fill_gradientn(colours = colorFunc(10), guide = FALSE) +
theme(panel.background = element_rect(fill = "black", colour = NA),
plot.background = element_rect(fill = "black", colour = NA),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggplot(data = df_lights) +
geom_tile(aes(x = x, y = y, fill = brightness)) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
scale_fill_gradientn(colours = colorFunc(10), guide = FALSE) +
theme(panel.background = element_rect(fill = "black", colour = NA),
plot.background = element_rect(fill = "black", colour = NA),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggsave("heatmap.png", height = 7, width = 7)
setwd("~/Desktop/github/adventR/day3")
library(readr)
library(dplyr)
library(plyr)
# read input from file
input <- read_file("input.txt")
# separate input string into individual characters
input_split <- strsplit(input, split = "") %>% unlist
# function to determine move direction
get_coord <- function(move) {
x <- 0; y <- 0
if (move == "^") {
y <- 1
} else if (move == ">") {
x <- 1
} else if (move == "v") {
y <- -1
} else if (move == "<") {
x <- -1
}
data.frame(x = x, y = y)
}
# find move direction for each character
moves <- ldply(input_split, get_coord) %>% rbind(data.frame(x = c(0, 0), y = c(0, 0)))
# separate moves into Santa and Robo-Santa sets
santa_moves <- moves[c(TRUE, FALSE), ]
robo_moves <- moves[c(FALSE, TRUE), ]
# sum move directions to get house locations
santa_coords <- data.frame(x = cumsum(santa_moves$x), y = cumsum(santa_moves$y))
robo_coords <- data.frame(x = cumsum(robo_moves$x), y = cumsum(robo_moves$y))
# create ordered pair to find unique locations
santa_coords <- santa_coords %>% mutate(pair = paste0(x, ", ", y))
robo_coords <- robo_coords %>% mutate(pair = paste0(x, ", ", y))
# combine sets of house locations
combined <- rbind(santa_coords, robo_coords)
# determine number of unique houses
length(unique(combined$pair))
#2639
library(ggplot2)
library(scales)
library(grid)
combined$group <- factor(c(rep("Santa", length(santa_coords$x)), rep("Robo-Santa", length(robo_coords$x))))
ggplot(data = combined) +
geom_point(aes(x = x, y = y, colour = group),
alpha = 1/3, size = 1) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) +
scale_colour_manual(values = c("#00BFC4", "#F8766D")) +
guides(colour = guide_legend(override.aes = list(size = 5, alpha = 1))) +
theme(panel.background = element_rect(fill = "black", colour = NA),
plot.background = element_rect(fill = "black", colour = NA),
panel.grid = element_blank(), panel.border = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
axis.title.x = element_blank(), axis.title.y = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(),
legend.position = c(1, 0), legend.justification = c(1, 0),
legend.title = element_blank(), legend.background = element_rect(fill = alpha("black", 0)),
legend.key = element_blank(), legend.text = element_text(colour = "white", size = 12),
plot.margin = unit(c(0, 0, 0, 0), "mm"))
ggsave("paths.png", height = 7, width = 7)
